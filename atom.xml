<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>飞天0407的博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-08-03T06:09:22.343Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>飞天0407</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>快速建立可以在Tomcat中运行的Spring Boot项目</title>
    <link href="http://yoursite.com/2017/08/02/%E5%BF%AB%E9%80%9F%E5%BB%BA%E7%AB%8B%E5%8F%AF%E4%BB%A5%E5%9C%A8Tomcat%E4%B8%AD%E8%BF%90%E8%A1%8C%E7%9A%84Spring-Boot%E9%A1%B9%E7%9B%AE/"/>
    <id>http://yoursite.com/2017/08/02/快速建立可以在Tomcat中运行的Spring-Boot项目/</id>
    <published>2017-08-02T08:53:04.000Z</published>
    <updated>2017-08-03T06:09:22.343Z</updated>
    
    <content type="html"><![CDATA[<p>该示例是演示如何使用IDEA创建一个Spring Boot项目，直接利用Tomcat运行，且打成war包在Tomcat中启动。<br><a id="more"></a></p>
<h4 id="新建一个项目"><a href="#新建一个项目" class="headerlink" title="新建一个项目"></a>新建一个项目</h4><p><img src="http://ojplxteam.bkt.clouddn.com/blog/20170802/145058449.png" alt="mark"><br><img src="http://ojplxteam.bkt.clouddn.com/blog/20170802/145140518.png" alt="mark"><br><img src="http://ojplxteam.bkt.clouddn.com/blog/20170802/145150878.png" alt="mark"></p>
<p>只选择一个web依赖导入</p>
<h4 id="编写简单示例代码"><a href="#编写简单示例代码" class="headerlink" title="编写简单示例代码"></a>编写简单示例代码</h4><p>项目结构如图：<br><img src="http://ojplxteam.bkt.clouddn.com/blog/20170802/145407101.png" alt="mark"></p>
<p>代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/demo"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/hello"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"hello world"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>启动程序，向前台简单输出<code>hello world</code>，测试访问<a href="http://localhost:8080/demo/hello" target="_blank" rel="external">http://localhost:8080/demo/hello</a><br>运行正常。</p>
<h4 id="修改主启动程序"><a href="#修改主启动程序" class="headerlink" title="修改主启动程序"></a>修改主启动程序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(DemoApplication.class, args);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> application.sources(DemoApplication.class);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>继承<code>SpringBootServletInitializer</code>重写<code>configure</code></p>
<h4 id="配置成普通web项目"><a href="#配置成普通web项目" class="headerlink" title="配置成普通web项目"></a>配置成普通web项目</h4><p><img src="http://ojplxteam.bkt.clouddn.com/blog/20170802/145925391.png" alt="mark"></p>
<p>选择web项目，结果如图：<br><img src="http://ojplxteam.bkt.clouddn.com/blog/20170802/150020242.png" alt="mark"><br>可以删除web.xml的配置和web配置，结果如图：<br><img src="http://ojplxteam.bkt.clouddn.com/blog/20170802/150630982.png" alt="mark"><br>配置Artifacts，如图所示选择：<br><img src="http://ojplxteam.bkt.clouddn.com/blog/20170802/150132681.png" alt="mark"><br><img src="http://ojplxteam.bkt.clouddn.com/blog/20170802/150305623.png" alt="mark"><br>选中demo的module，结果如图：<br><img src="http://ojplxteam.bkt.clouddn.com/blog/20170802/150338696.png" alt="mark"><br>这里更改输出目录，选择target目录<br><img src="http://ojplxteam.bkt.clouddn.com/blog/20170802/150855321.png" alt="mark"></p>
<h4 id="配置Tomcat启动程序"><a href="#配置Tomcat启动程序" class="headerlink" title="配置Tomcat启动程序"></a>配置Tomcat启动程序</h4><p><img src="http://ojplxteam.bkt.clouddn.com/blog/20170802/151008744.png" alt="mark"><br>选择之前配置的Artifacts<br><img src="http://ojplxteam.bkt.clouddn.com/blog/20170802/151045224.png" alt="mark"><br>测试访问<a href="http://localhost:8080/demo/hello" target="_blank" rel="external">http://localhost:8080/demo/hello</a><br>运行正常。</p>
<h4 id="打成war配置"><a href="#打成war配置" class="headerlink" title="打成war配置"></a>打成war配置</h4><p>修改pom.xml文件</p>
<ol>
<li>修改<code>&lt;packaging&gt;jar&lt;/packaging&gt;</code>为<code>&lt;packaging&gt;war&lt;/packaging&gt;</code></li>
<li>添加依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>这里不再使用自带的Tomcat容器</p>
<p>打包<br><img src="http://ojplxteam.bkt.clouddn.com/blog/20170802/153948651.png" alt="mark"></p>
<h4 id="放入Tomcat中进行测试"><a href="#放入Tomcat中进行测试" class="headerlink" title="放入Tomcat中进行测试"></a>放入Tomcat中进行测试</h4><ol>
<li>打成的war包名称是<code>demo-0.0.1-SNAPSHOT.war</code>，修改成<code>demo.war</code></li>
<li>放入Tomcat的webapps文件夹中，使用命令<code>catalina.bat run</code>运行</li>
<li>访问路径<a href="http://localhost:8080/demo/demo/hello" target="_blank" rel="external">http://localhost:8080/demo/demo/hello</a> 测试成功，第一个demo是项目名称</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;该示例是演示如何使用IDEA创建一个Spring Boot项目，直接利用Tomcat运行，且打成war包在Tomcat中启动。&lt;br&gt;
    
    </summary>
    
    
      <category term="Spring Boot" scheme="http://yoursite.com/tags/Spring-Boot/"/>
    
      <category term="Tomcat" scheme="http://yoursite.com/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://yoursite.com/2017/07/20/test/"/>
    <id>http://yoursite.com/2017/07/20/test/</id>
    <published>2017-07-20T06:26:58.000Z</published>
    <updated>2017-07-20T08:24:18.556Z</updated>
    
    <content type="html"><![CDATA[<h3 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h3><p>我们在服务注册中心看到那么多服务，我们需要使用这些服务，并且在使用过程中达到负载均衡功能。</p>
<p>Spring Cloud Ribbon是基于Netflix Ribbon实现的一套客户端负载均衡的工具。它是一个基于HTTP和TCP的客户端负载均衡器。它可以通过在客户端中配置ribbonServerList来设置服务端列表去轮询访问以达到均衡负载的作用。</p>
<p>当Ribbon与Eureka联合使用时，ribbonServerList会被DiscoveryEnabledNIWSServerList重写，扩展成从Eureka注册中心中获取服务实例列表。同时它也会用NIWSDiscoveryPing来取代IPing，它将职责委托给Eureka来确定服务端是否已经启动。<br><a id="more"></a></p>
<h3 id="基本实现步骤"><a href="#基本实现步骤" class="headerlink" title="基本实现步骤"></a>基本实现步骤</h3><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 注册为服务 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>关键是添加<code>spring-cloud-starter-ribbon</code></p>
<h4 id="主程序上添加-EnableDiscoveryClient注册为服务"><a href="#主程序上添加-EnableDiscoveryClient注册为服务" class="headerlink" title="主程序上添加 @EnableDiscoveryClient注册为服务"></a>主程序上添加 <code>@EnableDiscoveryClient</code>注册为服务</h4><h4 id="主程序中开启负载均衡能力"><a href="#主程序中开启负载均衡能力" class="headerlink" title="主程序中开启负载均衡能力"></a>主程序中开启负载均衡能力</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EnableDiscoveryClient</span> <span class="comment">//添加发现服务能力</span></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RibbonApplication</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		SpringApplication.run(RibbonApplication.class, args);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="meta">@LoadBalanced</span></div><div class="line">	<span class="function">RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里使用看注解 <code>@LoadBalanced</code></p>
<h4 id="配置注册信息"><a href="#配置注册信息" class="headerlink" title="配置注册信息"></a>配置注册信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">server.port=3333</div><div class="line"></div><div class="line">spring.application.name=ribbon-consumer</div><div class="line"></div><div class="line">eureka.client.service-url.defaultZone=http://localhost:1001/eureka</div></pre></td></tr></table></figure>
<p>同样注册为服务</p>
<h4 id="编写服务方法"><a href="#编写服务方法" class="headerlink" title="编写服务方法"></a>编写服务方法</h4><p>一个Service类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComputeService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Resource</span></div><div class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addService</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> restTemplate.getForEntity(<span class="string">"http://compute-service/add?a=10&amp;b=20"</span>, String.class).getBody();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>一个Controller类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerController</span> </span>&#123;</div><div class="line">    <span class="meta">@Resource</span></div><div class="line">    <span class="keyword">private</span> ComputeService computeService;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/add"</span>, method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> computeService.addService();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>测试时候可以启动多个相同微服务名称的实例，多次访问<a href="http://localhost:3333/add" target="_blank" rel="external">http://localhost:3333/add</a> 可以查看输出日志，ribbon已经实现了负载均衡功能。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;含义&quot;&gt;&lt;a href=&quot;#含义&quot; class=&quot;headerlink&quot; title=&quot;含义&quot;&gt;&lt;/a&gt;含义&lt;/h3&gt;&lt;p&gt;我们在服务注册中心看到那么多服务，我们需要使用这些服务，并且在使用过程中达到负载均衡功能。&lt;/p&gt;
&lt;p&gt;Spring Cloud Ribbon是基于Netflix Ribbon实现的一套客户端负载均衡的工具。它是一个基于HTTP和TCP的客户端负载均衡器。它可以通过在客户端中配置ribbonServerList来设置服务端列表去轮询访问以达到均衡负载的作用。&lt;/p&gt;
&lt;p&gt;当Ribbon与Eureka联合使用时，ribbonServerList会被DiscoveryEnabledNIWSServerList重写，扩展成从Eureka注册中心中获取服务实例列表。同时它也会用NIWSDiscoveryPing来取代IPing，它将职责委托给Eureka来确定服务端是否已经启动。&lt;br&gt;
    
    </summary>
    
    
      <category term="test" scheme="http://yoursite.com/tags/test/"/>
    
      <category term="test2" scheme="http://yoursite.com/tags/test2/"/>
    
  </entry>
  
</feed>
